options {
  STATIC = false;
}

PARSER_BEGIN(MELAprog3)

package ParserProg3;

import Model.GlobalManager;
import Model.ParamManager;
import Model.ExpEvaluator;

public class MELAprog3 {

  public static void main(String[] args) throws ParseException {
    MELAprog3 parser = new MELAprog3(System.in);
    parser.Input();
  }

}
PARSER_END(MELAprog3)

/***************************************************************
SKIP
***************************************************************/
<DEFAULT,RESET,ID> SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"

  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

/***************************************************************
TOKENS
***************************************************************/

TOKEN : { < FLOAT:
                            ("-")?  (["0"-"9"])+ "." (["0"-"9"])*
                            | ("-")?  "." (["0"-"9"])+> }

TOKEN: { < #LETTER: ["A"-"Z","a"-"z"] > }
TOKEN: { < #DIGIT: ["0"-"9"] > }


<DEFAULT> TOKEN : { <EOL : ";" > }
<DEFAULT> TOKEN : { <ASSIGN : "=" >}
<DEFAULT> TOKEN : { <SQUO : "\'" > }
<DEFAULT> TOKEN: { <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*> }

<MATH> TOKEN : { <MATH_EXPR : (<FLOAT> | <DIGIT> | <LETTER> | <SYMBOL> | <SPACE> | <M_AND> | <M_OR> | <M_LINER> | <M_LINEN> | <SQUO>)+ > : DEFAULT }
<MATH> TOKEN : { <#SPACE : " " | "\t"> }
<MATH> TOKEN : { <#M_AND : "&&" > }
<MATH> TOKEN : { <#M_OR : "|"> }
<MATH> TOKEN : { <#M_LINER : "\r"> }
<MATH> TOKEN : { <#M_LINEN : "\n"> }


TOKEN : { <#SYMBOL : [".", "=", "+", "-", "*", "/", "%", "^", "(", ")", "!", "<", ">", ",", "_", "[","]" ]> }

void Input() :
{}
{		
    (
    	 Param()
    )*
}

void Param() :
{
    Token t1,t2;   
}
{		
    t1 = <IDENTIFIER>
    <ASSIGN>
    t2 = <MATH_EXPR>
    <EOL> 
    {
        double value = ExpEvaluator.evalParamExp(t2.image);
        if(value == ERROR_NUM) {
            throw new ParseException("line " + t2.beginLine + " colum " + t2.beginColumn +": "+t1.image +" not correctly defined!"); 
        }
        if(!GlobalManager.getParamManager().ParamExist(t1.image)) {
            GlobalManager.getParamManager().addParam(t1.image, value);        
        } 
    }
}


