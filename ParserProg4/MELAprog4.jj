options {
  STATIC = false;
}

PARSER_BEGIN(MELAprog2)

package ParserProg2;

### import classes needed

public class MELAprog2 {

  public static void main(String[] args) throws ParseException {
    MELAprog2 parser = new MELAprog2(System.in);
    parser.Input();
  }

}
PARSER_END(MELAprog2)

/***************************************************************
SKIP
***************************************************************/

<DEFAULT,RESET,ID> SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"

  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


/***************************************************************
TOKENS
***************************************************************/

 /* LITERALS */
TOKEN : { < #INTEGER: ("-")? ["0"-"9"] (["0"-"9"])* > }
TOKEN : { < #FLOAT:
                            ("-")?  (["0"-"9"])+ "." (["0"-"9"])*
                            | ("-")?  "." (["0"-"9"])+
                    > }
TOKEN : { < #FLOAT_SCIENTIFIC:
                             ("-")? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)
                            |  ("-")? "." (["0"-"9"])+ (<EXPONENT>)
                            |  ("-")? (["0"-"9"])+ <EXPONENT>
                    > }
TOKEN : { < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ > }
TOKEN: { < #LETTER: ["A"-"Z","a"-"z"] > }
TOKEN: { < #DIGIT: ["0"-"9"] > }

TOKEN: { < #WORD: (["A"-"Z","a"-"z"])+ > }

	
/*
IDENTIFIERS
*/

<DEFAULT> TOKEN : { <SECTION_SPACE : "#Space" > }
<DEFAULT> TOKEN : { <SECTION_PARAM : "#Parameters" > }
<DEFAULT> TOKEN : { <SECTION_AGENTS : "#Agents" > }
<DEFAULT> TOKEN : { <SECTION_ENV : "#Environment" > }
<DEFAULT> TOKEN : { <SECTION_INIT : "#Initial conditions" > }


<DEFAULT> TOKEN : { <GRAPH : "Graph" > }

<DEFAULT> TOKEN : { <VERTICES : "V" > }
<DEFAULT> TOKEN : { <EDGES : "E" > }

<DEFAULT> TOKEN : { <ONED : "OneD" > }
<DEFAULT> TOKEN : { <TWOD : "TwoD" > }
<DEFAULT> TOKEN : { <THREED : "ThreeD" > }

<DEFAULT> TOKEN : { <KEYWORD_SPACE : <GRAPH>|<ONED>|<TWOD>|<THREED> > }

<DEFAULT> TOKEN : { <KEYWORD_LOC : "l" > }
<DEFAULT> TOKEN : { <KEYWORD_NEIGH : "N(l)" > }
<DEFAULT> TOKEN : { <KEYWORD_ALL : "all" > }

<DEFAULT> TOKEN : {<INFSET : <KEYWORD_LOC>|<KEYWORD_NEIGH>|<KEYWORD_ALL>> }

<DEFAULT> TOKEN : { <EOL : ";" > }
<DEFAULT> TOKEN : { <PLUS : "+" > }
<DEFAULT> TOKEN : { <DOT : "." > }

<DEFAULT> TOKEN : { <SEMICOLON : ":" > }
<DEFAULT> TOKEN : { <DOLLAR : "$" > }

<DEFAULT> TOKEN : { <DEFINE : ":=" > }

<DEFAULT> TOKEN : { <ASSIGN : "=" > : MATH}
<DEFAULT> TOKEN : { <LSQ : "[" >}
<DEFAULT> TOKEN : { <RSQ : "]" >}
<DEFAULT> TOKEN : { <LR : "(" > }
<DEFAULT> TOKEN : { <RR : ")" > }
<DEFAULT> TOKEN : { <QUO : "\"" > }
<DEFAULT> TOKEN : { <SQUO : "\'" > }
<DEFAULT> TOKEN : { <QUEST : "?" > }
<DEFAULT> TOKEN : { <EXCL : "!" > }
<DEFAULT> TOKEN : { <AT : "@" > }
<DEFAULT> TOKEN : { <LBRAC : "{" > : MATH}
<DEFAULT> TOKEN : { <RBRAC : "}" > }

<DEFAULT> TOKEN : { <COMMA : "," > : SIMPLE_MATH }
<DEFAULT> TOKEN : { <LANG : "<" > }
<DEFAULT> TOKEN : { <RANG : ">" > }
<DEFAULT> TOKEN : { <PARALLEL : "||" > }


<DEFAULT> TOKEN : { <UPARROW : ">>" > }
<DEFAULT> TOKEN : { <DOWNARROW : "<<" > }
<DEFAULT> TOKEN : { <DASH : "-" > }

<DEFAULT> TOKEN: { <MELASYMBOL: <DOT>|<UPARROW>|<DOWNARROW>> }

<DEFAULT> TOKEN : {<INT : <INTEGER> > }
<DEFAULT> TOKEN : {<DOUBLE : <FLOAT>|<FLOAT_SCIENTIFIC> > }
<DEFAULT> TOKEN: { <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>|"_"|"$"|"#")*> }


<DEFAULT> TOKEN: { <UPDATE_LOC: <KEYWORD_LOC>|<WORD>> }

<MATH> TOKEN : { <MATH_EXPR : (<DIGIT> | <LETTER> | <SYMBOL> | <SPACE> | <M_AND> | <M_OR> | <M_LINER> | <M_LINEN> | <SQUO>)+ > : DEFAULT }
<MATH> TOKEN : { <#SPACE : " " | "\t"> }
<MATH> TOKEN : { <#M_AND : "&&" > }
<MATH> TOKEN : { <#M_OR : "|"> }
<MATH> TOKEN : { <#M_LINER : "\r"> }
<MATH> TOKEN : { <#M_LINEN : "\n"> }

<SIMPLE_MATH> TOKEN : { <MATH_PARAM : (<DIGIT> | <LETTER> | <PARAM_SYMBOL> | <SPACE>)+ > : DEFAULT}

TOKEN : { <#SYMBOL : [".", "=", "+", "-", "*", "/", "%", "^", "(", ")", "!", "<", ">", ",", "_", "[","]" ]> }
TOKEN : { <#PARAM_SYMBOL : [".", "+", "-", "*", "/", "%", "^" ]> }

/***********************************************
GRAMMAR RULES
***********************************************/

void Input() throws NumberFormatException, RuntimeException, ParseException :
{
    Token space;

}

{   <SECTION_SPACE>
	<SEMICOLON>
   	space = <KEYWORD_SPACE>
   	{if (space = "Graph")
   	 setGraph();   	}
   	else
   	{if (space = "OneD")   	 setOneD();   	 
   	}
   	else
   	{if (space = "TwoD")
   	 setTwoD();   	 
   	}
   	else
   	{if (space = "ThreeD")
   	 setThreeD();    }    else    {throw new ParseException("Spatial structure incorrectly defined");}

  	<SECTION_PARAM>
    (
    	 Param()
    )*
		<SECTION_AGENTS>
		{agents = true;}
    (
		 Agent()     
    )+

	   <SECTION_ENV>
		{env = true;}
    (
		 Env()     
    )*

        <SECTION_INIT>
        {init = true;}
    (
    	 Init()
    )
    { if (!agents && !init) 
        throw new ParseException("Some model sections are missing"); 
    }
    <EOF>
}

void Param() throws NumberFormatException, RuntimeException, ParseException :
{
    Token t1,t2;
    
}
{		
    t1 = <IDENTIFIER>
    <ASSIGN>
    t2 = <MATH_EXPR>
    <EOL> 
    {System.out.println("The name of the parameter is " + t1 + " and the value is " + t2 );}
}

void Agent() throws NumberFormatException, RuntimeException, ParseException :
{
    Token t;  
}
{
    t = <IDENTIFIER>
    <LR>
    <KEYWORD_LOC>
    <RR>
    {System.out.println("The agent" + t + " is in the model");}
    <DEFINE>
    Action(t) 
    (
        <PLUS> 
        Action(t) 
    )* 
    <EOL>
}



void Env() throws NumberFormatException, RuntimeException, ParseException :
{
    Token t;  
}
{
    t = <IDENTIFIER>
    {System.out.println("The agent" + t + " is in the model");}
    <DEFINE>
    EnvAction(t) 
    (
        <PLUS> 
        EnvAction(t) 
    )* 
    <EOL>
}

void Action(Agent t) throws NumberFormatException, RuntimeException, ParseException :
{
    int type = Action.ACTION_TYPE_NoInfAction;
}
{   
    [   
        LOOKAHEAD(2)
        NoInfAction(t)
        |
        LOOKAHEAD(2)
        InfAction(st)
        |
        LOOKAHEAD(2)
        PassAction(st)
        |
        LOOKAHEAD(2)
        EnvAction(st)
    ]
}

void NoInfAction(Agent t) throws NumberFormatException, RuntimeException, ParseException :
{
    Token name, rate=null, update; 
    String strName = null;
    boolean paramRate = false;
}
{  
    <LR>
    [
    	name = <IDENTIFIER>
    	{strName = name.image;}
    ]
    <COMMA>
    [
    	rate = <MATH_PARAM>
    ]
    <RR>
 
    <MELASYMBOL>
    update = <IDENTIFIER>
    <LR>
    updateloc = <UPDATE_LOC>
    <RR>
    {System.out.println("The action " + name + " has as update " + update + "(" + updateloc + ")");}
}

void InfAction(Agent t) throws NumberFormatException, RuntimeException, ParseException :
{
    Token name, rate=null, update, infset=null; 
    String strName = null;
    boolean paramRate = false;
}
{   
    <DASH>
    <RANG>
    <LBRAC>
    <INFSET>
    <RBRAC>    
    <LR>
    
    [
    	name = <IDENTIFIER>
    	{strName = name.image;}
    ]
    
    <COMMA>

    [
    	rate = <MATH_PARAM>
    ]
    <RR> 
    <MELASYMBOL>
    update = <IDENTIFIER>
    <LR>
    updateloc = <UPDATE_LOC>
    <RR>
    {System.out.println("The action " + name + " has as update " + update + "(" + updateloc + ")");}
}

void PassAction(Agent t) throws NumberFormatException, RuntimeException, ParseException :
{
    Token name, prob=null, update, range=null; 
    String strName = null;
    boolean paramRate = false;
}
{
    <DASH>
    <LANG>
    [
    	name = <IDENTIFIER>
    	{strName = name.image;}
    ]
    <COMMA>
    [
    	prob = <MATH_PARAM>
    ]
    <RR>
    <MELASYMBOL>
    update = <IDENTIFIER>
    <LR>
    updateloc = <UPDATE_LOC>
    <RR>
    {System.out.println("The action " + name + " has as update " + update + "(" + updateloc + ")");}
}


void EnvAction(Env t) throws NumberFormatException, RuntimeException, ParseException :
{
    Token name, rate=null, update ; 
    String strName = null;
    boolean paramRate = false;
}
{     
    <DASH>
    <RANG>
    <LBRAC>
    <INFSET>
    <RBRAC>    
    <LR>    
    [
    	name = <IDENTIFIER>
    	{strName = name.image;}
    ]   
    <COMMA>
    [
    	rate = <MATH_PARAM>
    ]
    <RR> 
    <DOT>
    update = <IDENTIFIER>
    {System.out.println("The action " + name + " has as update " + update + "(" + updateloc + ")");}
}



void Init() throws NumberFormatException, RuntimeException, ParseException :
{
    
}
{
  
    AtomAgent() 
    (
        <PARALLEL> 
        AtomAgent() 
    )*
         
        }    


void AtomAgent() throws NumberFormatException, RuntimeException, ParseException :
{
    Token t,x,y,z,n,t2=null;
    State st;
    int num = 1;
}
{
    t = <IDENTIFIER>
    <LR>
    x = <INT>
    (
       <COMMA>
    y = <INT>

     (
       <COMMA>
    z = <INT>
    )?
    )?    
    <RR>
    <LSQ>
    n = <INT>
    <RSQ>
  
}

void setGraph()throws NumberFormatException, RuntimeException, ParseException :
{
    Token v, v1, e, e1;
    BracketsCounter = 0;
}
{   <VERTICES >
    < ASSIGN >
    < LBRAC >
    v = <INT>
    {LocationManager.AllLoc.add(Location.createListName(v.image));
    LocationManager.prepareMap(Location.createListName(v.image));}  
      (
        <COMMA>
        v1 = <INT>
         {LocationManager.AllLoc.add(Location.createListName(v1.image));
         LocationManager.prepareMap(Location.createListName(v.image));}
         )*
    < RBRAC >

    <EDGES>
    <ASSIGN>
    <LBRAC>
    {BracketsCounter++}     <LBRAC>
    {BracketsCounter++}
     e = <INT>
     {LocationManager.addNeighNode(Location.createListName(e.image), BracketsCounter)}
      (        <COMMA>
       e1 = <INT>
       {LocationManager.addNeighNode(Location.createListName(e1.image), BracketsCounter)})*
     <RBRAC>
     {BracketsCounter++}
     ( <LBRAC>
     <INT>
      (
        <COMMA>
        <INT>)*
     <RBRAC>
     {BracketsCounter++})*
     <RBRAC>
     {BracketsCounter++}
       

}

void setOneD()throws NumberFormatException, RuntimeException, ParseException :
{
    Token x;
}
{   <LR>
    x = <INT>
   {Location.createAllLocOneD(x.image)}
   <RR>
}

void setTwoD()throws NumberFormatException, RuntimeException, ParseException :
{
    Token x, y;
}
{   <LR>
    x = <INT>
    < COMMA >
    y = < INT >
   <RR>
   {Location.createAllLocTwoD(x.image, y.image)}
}

void setThreeD()throws NumberFormatException, RuntimeException, ParseException :
{
    Token x, y, z;
}
{   <LR>
    x = <INT>
    < COMMA >
    y = < INT >
    < COMMA >
    z = < INT >
   <RR>
   {Location.createAllLocThreeD(x.image, y.image, z.image)}
}