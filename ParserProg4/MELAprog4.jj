options {
  STATIC = false;
}

PARSER_BEGIN(MELAprog4)

package ParserProg4;

import Actions.Action;
import Actions.EnvAction;
import Actions.InfAction;
import Actions.NoInfAction;
import Actions.PassAction;

import Model.Agent;
import Model.AgentManager;
import Model.ExpEvaluator;
import Model.GlobalManager;
import Model.Location;
import Model.LocationManager;
import Model.ParamManager;


public class MELAprog4 {
       
    public MELAprog4() {
        this(new java.io.StringReader(""));
    }

    public void parseFromString( String modelDef ) throws ParseException, TokenMgrError, NumberFormatException {
        this.ReInit(new java.io.StringReader(modelDef));
        this.Input();
    }

    public void parseFromFile( String filename ) throws ParseException, TokenMgrError, NumberFormatException {
        try { this.ReInit(new java.io.FileReader(filename)); }
        catch(java.io.IOException e) {throw new ParseException("Error while opening file " + filename + ": " + e); }
        this.Input();
    }

}

PARSER_END(MELAprog4)

/***************************************************************
SKIP
***************************************************************/

<DEFAULT,RESET,ID> SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"

  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


/***************************************************************
TOKENS
***************************************************************/

 /* LITERALS */
TOKEN : { < #INTEGER: ("-")? ["0"-"9"] (["0"-"9"])* > }
TOKEN : { < #FLOAT:
                            ("-")?  (["0"-"9"])+ "." (["0"-"9"])*
                            | ("-")?  "." (["0"-"9"])+
                    > }
TOKEN : { < #FLOAT_SCIENTIFIC:
                             ("-")? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)
                            |  ("-")? "." (["0"-"9"])+ (<EXPONENT>)
                            |  ("-")? (["0"-"9"])+ <EXPONENT>
                    > }
TOKEN : { < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ > }
TOKEN: { < #LETTER: ["A"-"Z","a"-"z"] > }
TOKEN: { < #DIGIT: ["0"-"9"] > }

TOKEN: { < #WORD: (["A"-"Z","a"-"z"])+ > }

	
/*
IDENTIFIERS
*/

<DEFAULT> TOKEN : { <SECTION_SPACE : "#Space" > }
<DEFAULT> TOKEN : { <SECTION_PARAM : "#Parameters" > }
<DEFAULT> TOKEN : { <SECTION_AGENTS : "#Agents" > }
<DEFAULT> TOKEN : { <SECTION_ENV : "#Environment" > }
<DEFAULT> TOKEN : { <SECTION_INIT : "#Initial conditions" > }


<DEFAULT> TOKEN : { <GRAPH : "Graph" > }

<DEFAULT> TOKEN : { <VERTICES : "V" > }
<DEFAULT> TOKEN : { <EDGES : "E" > }

<DEFAULT> TOKEN : { <ONED : "OneD" > }
<DEFAULT> TOKEN : { <TWOD : "TwoD" > }
<DEFAULT> TOKEN : { <THREED : "ThreeD" > }

<DEFAULT> TOKEN : { <KEYWORD_SPACE : <GRAPH>|<ONED>|<TWOD>|<THREED> > }

<DEFAULT> TOKEN : { <KEYWORD_LOC : "l" > }
<DEFAULT> TOKEN : { <KEYWORD_NEIGH : "N(l)" > }
<DEFAULT> TOKEN : { <KEYWORD_ALL : "all" > }

<DEFAULT> TOKEN : {<INFSET : <KEYWORD_LOC>|<KEYWORD_NEIGH>|<KEYWORD_ALL>> }

<DEFAULT> TOKEN : { <EOL : ";" > }
<DEFAULT> TOKEN : { <PLUS : "+" > }
<DEFAULT> TOKEN : { <DOT : "." > }
<DEFAULT> TOKEN : { <SEMICOLON : ":" > }
<DEFAULT> TOKEN : { <DEFINE : ":=" > }

<DEFAULT> TOKEN : { <ASSIGN : "=" > : MATH}
<DEFAULT> TOKEN : { <LSQ : "[" >}
<DEFAULT> TOKEN : { <RSQ : "]" >}
<DEFAULT> TOKEN : { <LR : "(" > }
<DEFAULT> TOKEN : { <RR : ")" > }
<DEFAULT> TOKEN : { <QUO : "\"" > }
<DEFAULT> TOKEN : { <SQUO : "\'" > }
<DEFAULT> TOKEN : { <QUEST : "?" > }
<DEFAULT> TOKEN : { <EXCL : "!" > }
<DEFAULT> TOKEN : { <LBRAC : "{" > : MATH}
<DEFAULT> TOKEN : { <RBRAC : "}" > }

<DEFAULT> TOKEN : { <COMMA : "," > : SIMPLE_MATH }
<DEFAULT> TOKEN : { <LANG : "<" > }
<DEFAULT> TOKEN : { <RANG : ">" > }
<DEFAULT> TOKEN : { <PARALLEL : "||" > }


<DEFAULT> TOKEN : { <UPARROW : ">>" > }
<DEFAULT> TOKEN : { <DOWNARROW : "<<" > }
<DEFAULT> TOKEN : { <DASH : "-" > }

<DEFAULT> TOKEN: { <MELASYMBOL: <DOT>|<UPARROW>|<DOWNARROW>> }

<DEFAULT> TOKEN : {<INT : <INTEGER> > }
<DEFAULT> TOKEN : {<DOUBLE : <FLOAT>|<FLOAT_SCIENTIFIC> > }
<DEFAULT> TOKEN: { <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>|"_"|"$"|"#")*> }


<DEFAULT> TOKEN: { <UPDATE_LOC: <KEYWORD_LOC>|<WORD>> }

<MATH> TOKEN : { <MATH_EXPR : (<DIGIT> | <LETTER> | <SYMBOL> | <SPACE> | <M_AND> | <M_OR> | <M_LINER> | <M_LINEN> | <SQUO>)+ > : DEFAULT }
<MATH> TOKEN : { <#SPACE : " " | "\t"> }
<MATH> TOKEN : { <#M_AND : "&&" > }
<MATH> TOKEN : { <#M_OR : "|"> }
<MATH> TOKEN : { <#M_LINER : "\r"> }
<MATH> TOKEN : { <#M_LINEN : "\n"> }

<SIMPLE_MATH> TOKEN : { <MATH_PARAM : (<DIGIT> | <LETTER> | <PARAM_SYMBOL> | <SPACE>)+ > : DEFAULT}

TOKEN : { <#SYMBOL : [".", "=", "+", "-", "*", "/", "%", "^", "(", ")", "!", "<", ">", ",", "_", "[","]" ]> }
TOKEN : { <#PARAM_SYMBOL : [".", "+", "-", "*", "/", "%", "^" ]> }

/***********************************************
GRAMMAR RULES
***********************************************/

void Input() throws NumberFormatException, RuntimeException, ParseException :
{
    Token space;    
    boolean spaceboolean = false, agents = false, init = false;
}

{   <SECTION_SPACE>
    {spaceboolean = true;}
	<SEMICOLON>
   	space = <KEYWORD_SPACE>
    {LocationManager.SpatialSt = space.image;
    if (LocationManager.SpatialSt == "Graph") {   	 setGraph();   	}
   	else if (LocationManager.SpatialSt.matches("(?i).*OneD*")) {  	     	 setOneD();   	 
   	}
   	else if (LocationManager.SpatialSt.matches("(?i).*TwoD*")) {  	  
   	 setTwoD();   	 
   	}
   	else if (LocationManager.SpatialSt.matches("(?i).*ThreeD*")) {   	  
   	 setThreeD();    }    else    {throw new ParseException("Spatial structure incorrectly defined");}      }

  	<SECTION_PARAM>
    (
      Param()
    )*

	<SECTION_AGENTS>
	{agents = true;}
    (
	  Agent()     
    )+

	<SECTION_ENV>
    (
	  Env()     
    )*
    
    {AgentManager.GlobalMatrixCreation();}

    <SECTION_INIT>
    {init = true;}
    (
    	 Init()
    )
    { if (!agents && !init) 
        throw new ParseException("Some model sections are missing"); 
    }
    <EOF>
}

void Param() throws NumberFormatException, RuntimeException, ParseException :
{
    Token t1,t2;
    
}
{		
    t1 = <IDENTIFIER>
    <ASSIGN>
    t2 = <MATH_EXPR>
    <EOL> 
    {double paramValue = ExpEvaluator.evalParamExp(t2.image);
      ParamManager.addParam(t1.image, paramValue);}
}

void Agent() throws NumberFormatException, RuntimeException, ParseException :
{
    Token t;
    Agent agent;
}
{
    t = <IDENTIFIER>
    <LR>
    <KEYWORD_LOC>
    <RR>
    {AgentManager.addAgentName(t.image);
     agent = new Agent(t.image);}
    <DEFINE>
    Action(agent) 
    (
        <PLUS> 
        Action(agent) 
    )* 
    <EOL>
}


void Env() throws NumberFormatException, RuntimeException, ParseException :
{
    Token t;
    Agent agent;
}
{
    t = <IDENTIFIER>
    {AgentManager.addAgentName(t.image);
     agent = new Agent(t.image);}
    <DEFINE>
    EnvAction(agent) 
    (
        <PLUS> 
        EnvAction(agent) 
    )* 
    <EOL>
}

void Action(Agent agent) throws NumberFormatException, RuntimeException, ParseException :
{
   
}
{   
    [   
        LOOKAHEAD(1)
        NoInfAction(agent)
        |
        LOOKAHEAD(1)
        InfAction(agent)
        |
        LOOKAHEAD(1)
        PassAction(agent)
        |
        LOOKAHEAD(1)
        EnvAction(agent)
    ]
}

void NoInfAction(Agent agent) throws NumberFormatException, RuntimeException, ParseException :
{
    Token name = null, rateName = null, symbol, update, updateloc; 
}
{  
    <LR>
    [
    name = <IDENTIFIER>
    ]
    <COMMA>
    [
    rateName = <IDENTIFIER>
    ]
    <RR>
    symbol = <MELASYMBOL>
    update = <IDENTIFIER>
    <LR>
    updateloc = <UPDATE_LOC>
    <RR>
     
    { Double rate = ParamManager.getParamValue(rateName.image);      NoInfAction ac = new NoInfAction(name.image, rate, symbol.image, update.image + "(" + updateloc.image + ")");
      agent.addAction(ac); }
}     


void InfAction(Agent agent) throws NumberFormatException, RuntimeException, ParseException :
{
    Token infset, name = null, rate = null, symbol, update, updateloc; 
}
{   
    <DASH>
    <RANG>
    <LBRAC>
    infset = <INFSET>
    <RBRAC>    
    <LR>    
    [
    	name = <IDENTIFIER>
    ]    
    <COMMA>
    [
    	rate = <IDENTIFIER>
    ]
    <RR> 
    symbol = <MELASYMBOL>
    update = <IDENTIFIER>
    <LR>
    updateloc = <UPDATE_LOC>
    <RR>
   { Double rateValue = ParamManager.getParamValue(rate.image);
     InfAction ac = new InfAction(name.image, rateValue, infset.image, symbol.image, update.image + "(" + updateloc.image + ")");
     agent.addAction(ac); } 

}


void PassAction(Agent agent) throws NumberFormatException, RuntimeException, ParseException :
{
    Token name = null, probName = null, update, updateloc, symbol; 
}
{
    <LANG>
    <DASH>
    <LR>
    [
    	name = <IDENTIFIER>
    ]
    <COMMA>
    [
    	probName = <IDENTIFIER>
    ]
    <RR>
    symbol = <MELASYMBOL>
    update = <IDENTIFIER>
    <LR>
    updateloc = <UPDATE_LOC>
    <RR>
    {Double prob = ParamManager.getParamValue(probName.image);
     PassAction ac = new PassAction(name.image, prob, symbol.image, update.image + "(" + updateloc.image + ")");
     agent.addAction(ac); } 
}

void EnvAction(Env agent) throws NumberFormatException, RuntimeException, ParseException :
{
    Token infset, name, rateName, update;
}
{     
    <DASH>
    <RANG>
    <LBRAC>
    infset = <INFSET>
    <RBRAC>    
    <LR>    
    [
    	name = <IDENTIFIER>
    ]   
    <COMMA>
    [
    	rateName = <IDENTIFIER>
    ]
    <RR> 
    <DOT>
    update = <IDENTIFIER>
    {Double rate = ParamManager.getParamValue(rateName.image);
    EnvAction ac = new EnvAction(name.image, rate, infset.image, update.image);
    agent.addAction(ac); }
}


void Init() throws NumberFormatException, RuntimeException, ParseException :
{
    
}
{  
    InitAgent() 
    (
        <PARALLEL> 
        InitAgent() 
    )*
         
        }    


void InitAgent() throws NumberFormatException, RuntimeException, ParseException :
{
    Token t,x=null,y=null,z=null,n =null;
}
{
    t = <IDENTIFIER>
    (
    <LR>
    x = <INT>
    (
       <COMMA>
    y = <INT>
    (
       <COMMA>
    z = <INT>
    )?
    )?    
    <RR>
    )?
    <LSQ>
    n = <INT>
    <RSQ>
   
  { if (x.image == null)  {int InitNum = Integer.parseInt(n.image);    
    AgentManager.GlobalMatrix[AgentManager.MatrixAgent.get(t.image)][LocationManager.MatrixLoc.get(LocationManager.createListZero())] = InitNum;  }else{    if (LocationManager.SpatialSt == "Graph") {
     int InitNum = Integer.parseInt(n.image);
     int xValue = Integer.parseInt(x.image);
   	 AgentManager.GlobalMatrix[AgentManager.MatrixAgent.get(t.image)][LocationManager.MatrixLoc.get(LocationManager.createListOneD(xValue))]= InitNum;
   	}
   	else if (LocationManager.SpatialSt.matches("(?i).*OneD*")) {
    int InitNum = Integer.parseInt(n.image);
    int xValue = Integer.parseInt(x.image);
 	AgentManager.GlobalMatrix[AgentManager.MatrixAgent.get(t.image)][LocationManager.MatrixLoc.get(LocationManager.createListOneD(xValue))]= InitNum;   	 
   	}
   	else if (LocationManager.SpatialSt.matches("(?i).*TwoD*")) {
    int InitNum = Integer.parseInt(n.image);
    int xValue = Integer.parseInt(x.image);
    int yValue = Integer.parseInt(y.image);    	  
    AgentManager.GlobalMatrix[AgentManager.MatrixAgent.get(t.image)][LocationManager.MatrixLoc.get(LocationManager.createListTwoD(xValue, yValue))]= InitNum;  	 
   	}
   	else if (LocationManager.SpatialSt.matches("(?i).*ThreeD*")) {
    int InitNum = Integer.parseInt(n.image);
    int xValue = Integer.parseInt(x.image);
    int yValue = Integer.parseInt(y.image);
    int zValue = Integer.parseInt(z.image);	    	  
    AgentManager.GlobalMatrix[AgentManager.MatrixAgent.get(t.image)][LocationManager.MatrixLoc.get(LocationManager.createListThreeD(xValue,yValue,zValue))]= InitNum;
    }
  }
}
}


void setGraph()throws NumberFormatException, RuntimeException, ParseException :
{
    Token v, v1, e, e1;
    int BracketsCounter = 0;
}
{   <VERTICES >
    < ASSIGN >
    < LBRAC >
    v = <INT>
    {int vertexName = Integer.parseInt(v.image);   
    LocationManager.AllLoc.add(Location.createListName(vertexName));
    LocationManager.prepareMap(Location.createListName(vertexName));}  
      (
        <COMMA>
        v1 = <INT>
    {int vertexName1 = Integer.parseInt(v.image);
    LocationManager.AllLoc.add(Location.createListName(vertexName1));
    LocationManager.prepareMap(Location.createListName(vertexName1));}
      )*
    < RBRAC >

    <EDGES>
    <ASSIGN>
    <LBRAC>
    {BracketsCounter++;}     <LBRAC>
    {BracketsCounter++;}
     e = <INT>
     {int edgeName = Integer.parseInt(e.image);
     LocationManager.addNeighNode(Location.createListName(edgeName), BracketsCounter);}
      (        <COMMA>
       e1 = <INT>
     {int edgeName1 = Integer.parseInt(e1.image);
     LocationManager.addNeighNode(Location.createListName(edgeName1), BracketsCounter);})*
     <RBRAC>
     {BracketsCounter++;}
     (<COMMA>
      <LBRAC>
    {BracketsCounter++;}
     e = <INT>
     {int edgeName2 = Integer.parseInt(e.image);
     LocationManager.addNeighNode(Location.createListName(edgeName2), BracketsCounter);}
      (
        <COMMA>
       e1 = <INT>
     {int edgeName3 = Integer.parseInt(e1.image);
     LocationManager.addNeighNode(Location.createListName(edgeName3), BracketsCounter);})*
     <RBRAC>
     {BracketsCounter++;}
       )*
     <RBRAC>
     {BracketsCounter++;}
}

void setOneD()throws NumberFormatException, RuntimeException, ParseException :
{
    Token x;
}
{   <LR>
    x = <INT>
   {int xValue = Integer.parseInt(x.image);
   Location.createAllLocOneD(xValue);}
   <RR>
}

void setTwoD()throws NumberFormatException, RuntimeException, ParseException :
{
    Token x, y;
}
{   <LR>
    x = <INT>
    < COMMA >
    y = < INT >
   <RR>
   {int xValue = Integer.parseInt(x.image);
    int yValue = Integer.parseInt(y.image);
   Location.createAllLocTwoD(xValue, yValue);}
}

void setThreeD()throws NumberFormatException, RuntimeException, ParseException :
{
    Token x, y, z;
}
{   <LR>
    x = <INT>
    < COMMA >
    y = < INT >
    < COMMA >
    z = < INT >
   <RR>
   {int xValue = Integer.parseInt(x.image);
    int yValue = Integer.parseInt(y.image);
    int zValue = Integer.parseInt(z.image);
    Location.createAllLocThreeD(xValue, yValue, zValue);}
}